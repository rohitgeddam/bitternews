
type Project {
  id: ID!
  title: String!
  description: String!
  postedBy: User!
  postedOn: Date!
  votes: [Vote!]!
}

type Vote {
  voter: ID!
  votedFor: ID!
}

type User {
  id: ID!
  email: String!
  username: String!
  projects: [Project!]!

}

type Query {
  allProjects: [Project!]!
  allUsers: [User!]!
}

type Mutation {
  addProject(title: String!, description: String!): AddProjectResponse!
  signIn(email: String!, password: String!): AuthResponse!
  signUp(email: String!, password: String!, username: String!): AuthResponse!
  vote(votedFor: ID!): VotingResponse
}

interface MutationResponse {
  status: String!
}

type VotingResponse implements MutationResponse {
  status: String!
  message: String!
  data: Vote
}
type AuthResponseObject {
  token: String!
  user: User
}

type AuthResponse implements MutationResponse {
  status: String!
  message: String!
  data: AuthResponseObject
}

type AddProjectResponse implements MutationResponse {
  status: String!
  data: Project
}

scalar Date


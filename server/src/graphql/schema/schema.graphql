
type Project {
  id: ID!
  title: String!
  description: String!
  postedBy: User!
  postedOn: Date!
  votes: [Vote!]!
}

type Vote {
  voter: ID!
  votedFor: ID!
}

type User {
  id: ID!
  email: String!
  username: String!
  projects: [Project!]!
}

type Confession {
  id: ID!
  message: String!
  postedOn: Date!
  postedBy: User!
  votes: [Vote!]!
}

# type Poll {
#   id: ID!
#   question: String!
#   choices: [PollChoice!]!
#   startDateTime: DateTime!
#   endDateTime: DateTime!
# }

# type PollChoice {
#   id: ID!
#   text: String!
#   votes: [Vote!]!
# }

interface PaginationResult {
  totalDocs: Int
  limit: Int
  totalPages: Int
  page: Int
  pagingCounter: Int
  hasPrevPage: Boolean
  hasNextPage: Boolean
  prevPage: Boolean
  nextPage: Int
}

type ConfessionPaginationResult implements PaginationResult {
  docs: [Confession!]!
  totalDocs: Int
  limit: Int
  totalPages: Int
  page: Int
  pagingCounter: Int
  hasPrevPage: Boolean
  hasNextPage: Boolean
  prevPage: Boolean
  nextPage: Int
}

type ProjectPaginationResult implements PaginationResult {
  docs: [Project!]!
  totalDocs: Int
  limit: Int
  totalPages: Int
  page: Int
  pagingCounter: Int
  hasPrevPage: Boolean
  hasNextPage: Boolean
  prevPage: Boolean
  nextPage: Int 
}


type Query {
  allProjects(page: Int, limit: Int): ProjectPaginationResult!
  # allConfessions: [Confession!]!
  allConfessions(page: Int, limit: Int): ConfessionPaginationResult!
  allUsers: [User!]!
}

type Mutation {
  addProject(title: String!, description: String!): AddProjectResponse!
  signIn(email: String!, password: String!): AuthResponse!
  signUp(email: String!, password: String!, username: String!): AuthResponse!
  vote(votedFor: ID!): VotingResponse
  addConfession(message: String!):  ConfessionResponse!
}

interface MutationResponse {
  status: String!
}

type ConfessionResponse implements MutationResponse {
  status: String!
  message: String!
  data: Confession
}

type VotingResponse implements MutationResponse {
  status: String!
  message: String!
  data: Vote
}
type AuthResponseObject {
  token: String!
  user: User
}

type AuthResponse implements MutationResponse {
  status: String!
  message: String!
  data: AuthResponseObject
}

type AddProjectResponse implements MutationResponse {
  status: String!
  data: Project
}

scalar Date
scalar DateTime

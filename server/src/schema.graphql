    type Query {
        info: String!
        feed(filter: String, skip: Int, take: Int, orderBy: LinkOrderByInput): [Link!]!
        link(id: ID!): Link
        userList: [User!]!
    }

    type Mutation {
        post(url: String!, description: String!): Link!
        updateLink(id: ID!, url: String, description: String): Link
        deleteLink(id: ID!): Link
        signup(email: String!, password: String!, name: String!): AuthPayload
        login(email: String!, password: String!): AuthPayload
        vote(linkId: ID!): Vote
    }

    type Subscription {
        newLink: Link
        newVote: Vote
    }

    type Feed {
        links: [Link!]!
        count: Int!
    }

    type AuthPayload {
        token: String
        user: User
    }

    type Link {
        id: ID!
        description: String!
        url: String!
        votes: [Vote!]!
    }

    type User {
        id: ID!
        name: String!
        email: String!
        links: [Link!]!
    }

    type Vote {
        id: ID!
        link: Link!
        user: User!
    }

    input LinkOrderByInput {
        description: Sort
        url: Sort
        createdAt: Sort
    }

    enum Sort {
        asc
        desc
    }